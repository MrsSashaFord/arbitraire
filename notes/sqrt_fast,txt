 < tmyklebu> if a and b are < N^2, sqrt(a*N^2+b) = sqrt(a)*N + crap where 
                  crap satisfies crap^2 + 2*crap*sqrt(a)*N = b.  maybe the fixup 
                  isn't so clean.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <gmp.h>
extern "C" char *gets(char *);
 
void do_sqrt_fixup(mpz_t out, mpz_t approx, mpz_t tmp) {
  // (approx + t)^2 = out + approx^2
  // 2*t*approx + t^2 = out
  // t ~= out / 2 / approx
  mpz_t tmp2;
  mpz_init(tmp2);
  again:
  //gmp_printf("%Zi %Zi\n", out, approx);
  mpz_fdiv_q(tmp, out, approx);
  mpz_fdiv_q_2exp(tmp, tmp, 1);
  mpz_mul(tmp2, tmp, tmp);
  mpz_sub(out, out, tmp2);
  mpz_mul(tmp2, approx, tmp);
  mpz_sub(out, out, tmp2);
  mpz_sub(out, out, tmp2);
  mpz_add(approx, approx, tmp);
  mpz_add(tmp2, approx, approx);
  mpz_add_ui(tmp2, tmp2, 1);
  if (mpz_cmp(out, tmp2) == 1) goto again;
  if (mpz_sgn(out) == -1) goto again;
  mpz_clear(tmp2);
}
 
void calc_sqrt(mpz_t out, mpz_t in) {
  double approx;
  long expo;
  approx = mpz_get_d_2exp(&expo, in);
  if (approx < 0) __builtin_trap();
  if (expo > 50) {
    mpz_t hi, hisqrt;
    mpz_init(hi);
    mpz_init(hisqrt);
    mpz_tdiv_q_2exp(hi, in, expo / 4 * 2);
    calc_sqrt(hisqrt, hi);
    mpz_mul_2exp(hisqrt, hisqrt, expo / 4);
    mpz_mul(out, hisqrt, hisqrt);
    mpz_sub(out, in, out);
    mpz_mul_2exp(hi, hi, expo / 4 * 2);
    //gmp_printf("%Zi %Zi %Zi %Zi\n", in, hi, hisqrt, out);
    do_sqrt_fixup(out, hisqrt, hi);
    mpz_set(out, hisqrt);
    mpz_clear(hi);
    mpz_clear(hisqrt);
  } else {
    long x = mpz_get_ui(in);
    mpz_set_ui(out, sqrt(x));
  }
}
 
void verify_sqrt(mpz_t x, mpz_t xx) {
  mpz_t tmp, tmp2;
  mpz_init(tmp);
  mpz_init(tmp2);
  mpz_mul(tmp, x, x);
  mpz_add_ui(tmp2, x, 1);
  mpz_mul(tmp2, tmp2, tmp2);
  if (mpz_cmp(xx, tmp) < 0) {
    printf("square root too large\n");
  } else if (mpz_cmp(xx, tmp2) > 0) {
    printf("square root too small\n");
  } else {
    printf("square root just right\n");
  }
}
 
int main() {
  char buf[6553600];
  gets(buf);
  mpz_t z, sqrtz;
  mpz_init(z);
  mpz_init(sqrtz);
  mpz_set_str(z, buf, 10);
  calc_sqrt(sqrtz, z);
  verify_sqrt(sqrtz, z);
}
