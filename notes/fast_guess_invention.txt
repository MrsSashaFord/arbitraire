

Copyright 2019 Chris Graff

This method is intended to be a part of a patent application process and is not
covered by any free software license. Arbitraire can be distrubted with it, and this
method can be deleted from arbitraire, but it can not be reproduced for any other means
and is solely the property of Christoper Graff.


This is a proposal for a mathematics invention

the invention consists of guessing mechanism and a state machine 

From here on out it will be referred to as 'fastguess'


Fastguess partitions numbers so as to arrive at a fast guess of the target number. It
can be used in division and square root algorithms


In long-hand square root, as is attributed to Fibonacci there are guesses of the form

XXXn * n, where XXX is a known value and 'n' would generally start at zero and be incremented
toward the correct solution

fastguess instead partitions the value of 'n' against the working base and for base 10 would
work as follows

	'n' starts off as Base/2, which would be 5 for base 10, it is tested to see if it is
	greater than or less than the target solution. if it is less than the target solution
	base/2 + base/4 is tried, which with unsigned mathematics base/4 would be 2 and base/2
	would be 5 and the result be a guess of 7.

	In order to expand on these properties we must introduce a state machine which shows
	whether or not the solution has been passed up. in the case that base/2+base/4 or 7
	is greater than the tagrt solution and base/2 has been tried and shown to be less, the
	state machine is activated to "ON" and this "ON" would indicate that it is time to start
	narrowing in on the solution using from the last guess that was below the target solution
	so, if that last guess was Base/2 and Base/2 + Base/4 exceeds the solution we would know
	to either work up form Base/2 or down from Base/2+Base/4

	fastguess can also be used for division in order to partition from an initial guess
	based on the natural logarithms of the inputs such as log(denominator) - log(numerator) =
	log(solution). Then if log(solution) is 4 then the first guess is aproximated as 1000
	. Fastguess is then applied to quickly partition the difference between the denominator
	and 1000 so for instance if the denominator was 50000 and and the initial guess was 1000
	we would be working at paritioning 49000. And it would proceed identically to what was
	described before in the example for square root. 49000/2 would be added to 1000, tested
	and if was too low 49000/2 + 49000/4 would be tried and do on.

	If the initial guessing of x/2 is too high, then instead x/2 - x/4 would be tried and
	the state machine would be activated for the inverse circumstance.

	This method relies on the state machine to know when to start reversing the order of the
	trial guesses. If possible, one should avoid incrementing until all but the final digit
	of the guess is correct and then would be finalizes once more as Base/2 + Base/4 and so
	on until the state has crossed the solution and then incrementing would be applied to
	granulate the guess to the target solution



	fastguess can also use x/3 + x/6 ...

	fast guess does not depend on division however, and can instead be implemented with logic
	in base N. 10000 in base 10 can be divided in half by dropping a place value and starting
	the first guess as a series of digits, the first of which would start at Base/2 and the 
	remaining digits would be zeros. In this way, the guessing mechanism is bound solely by	
	the algorithmic complexity of a multiplication and can make use of other fast multiplication
	methods such as karatsuba. The logical composition of the numbers at this level is cheap
	costing only that of an O(n) traversal. In this way, starting with the number 10000 we would
	obtain the sequence: 10000, 5000, 2000. The state machine would indicate if one of these
	proposed guesses has crossed the threshold and the next sequence may be: 5000, 3000 ...
	this would represent the x/3 + x/6 sequence and in very high bases, as are often used
	in arbitrary precision calculations a greater granularity can be achieved.

	fastguess draws from and expands on Newton's method but as of my knowledge is not covered
	by any existing algorithm or implementation.


